matches_wat_mid[[i]]))
site.subset = site.data[!(site.data[3]==0),]
names(site.subset)[1] <- 'Mass'
names(site.subset)[2] <- 'MolForm'
names(site.subset)[3] <- 'Count'
write.csv(site.subset,file=paste0(i,".csv"),row.names = FALSE)
}
matches_wat_low <- cbind(water.low.data$Mass, water.low.data$MolForm,
water.low.data[unique(grep(paste(var_of_interest,collapse="|"), colnames
(water.low.data), value=TRUE))])
names(matches_wat_low)[1] <- 'Mass'
names(matches_wat_low)[2] <- 'MolForm'
#For each site subset, eliminate rows with 0 and format headers
for (i in colnames(matches_wat_low[3:length(matches_wat_low)])) {
site.data = as.data.frame(cbind(matches_wat_low$Mass, matches_wat_low$MolForm,
matches_wat_low[[i]]))
site.subset = site.data[!(site.data[3]==0),]
names(site.subset)[1] <- 'Mass'
names(site.subset)[2] <- 'MolForm'
names(site.subset)[3] <- 'Count'
write.csv(site.subset,file=paste0(i,".csv"),row.names = FALSE)
}
matches_wat_low <- cbind(water.lower.data$Mass, water.lower.data$MolForm,
water.lower.data[unique(grep(paste(var_of_interest,collapse="|"), colnames
(water.lower.data), value=TRUE))])
names(matches_wat_low)[1] <- 'Mass'
names(matches_wat_low)[2] <- 'MolForm'
#For each site subset, eliminate rows with 0 and format headers
for (i in colnames(matches_wat_low[3:length(matches_wat_low)])) {
site.data = as.data.frame(cbind(matches_wat_low$Mass, matches_wat_low$MolForm,
matches_wat_low[[i]]))
site.subset = site.data[!(site.data[3]==0),]
names(site.subset)[1] <- 'Mass'
names(site.subset)[2] <- 'MolForm'
names(site.subset)[3] <- 'Count'
write.csv(site.subset,file=paste0(i,".csv"),row.names = FALSE)
}
library(tidyverse)
# extract chemical compositions from the table
CHEMICAL_ELEMENTS = c("C","H","N","O","P","S")
get_compositions <- function(df) {
chemical_compositions <- NULL
formulas <- NULL
if ("C" %in% colnames(df)) {
tdf <- df %>%
filter(C > 0)
if ("C13" %in% colnames(df)) {
tdf <- tdf %>%
filter(C13 == 0)
}
chemical_compositions <- as.matrix(tdf[CHEMICAL_ELEMENTS])
formulas <- tdf$MolForm
} else if ("MolForm" %in% colnames(df)) {
tdf <- df %>%
drop_na(MolForm) %>%
filter(MolForm != "")
parse_output <- parse_formulas(tdf$MolForm)
formulas <- tdf$MolForm[parse_output$is_valid]
chemical_compositions <- parse_output$composition[parse_output$is_valid,]
warning("`MolForm` column is parsed to get the chemical compositions")
} else {
error("Either columns for compositions (e.g., C, H, N, ...) or `MolForm` column is required.")
}
if ("Z" %in% colnames(df)) {
chemical_compositions <- cbind(chemical_compositions, "Z"=df$Z)
} else {
chemical_compositions <- cbind(chemical_compositions, "Z"=0)
}
list(
"chemical_compositions" = chemical_compositions,
"formulas" = formulas
)
}
# parse formulas into compositions
parse_formulas <- function(formulas) {
rst <- array(0, dim=c(length(formulas), length(CHEMICAL_ELEMENTS)))
is_valid <- array(TRUE, dim=c(length(formulas)))
for (k in 1:length(formulas)){
formula <- formulas[k]
ge <- gregexpr("[A-Z]\\d*", formula, perl=TRUE)
s_index <- ge[[1]]
s_len <- attr(s_index, "match.length")
for (i in 1:length(s_len)){
token <- substr(formula, s_index[i], s_index[i] + s_len[i] - 1)
element <- substr(token, 1, 1)
if (grepl(element, "CHNOSP")) {
idx = which(CHEMICAL_ELEMENTS %in% element)
if (rst[k, idx] > 0) {   # same element again? (e.g., C13)
if (token != "C13") {
warning(paste0(formula,": wrong format"))
}
is_valid[k] = FALSE
next
}
if (s_len[i] == 1) {
rst[k, idx] = 1
} else {
num_element <- try(strtoi(substr(formula, s_index[i] + 1, s_index[i] + s_len[i] - 1)))
if (class(num_element)=="integer"){
rst[k, idx] = num_element
} else {
print(paste("[ERROR] an unknown chemical element found:", token, "in", formula))
}
}
} else {
print(paste("[ERROR] an unknown chemical element found:", element, "in", formula))
}
}
}
colnames(rst) <- CHEMICAL_ELEMENTS
list("composition"=rst, "is_valid"=is_valid)
}
# compute thermodynamic properties and lambda values
getThermoStoich <- function(chemForm) {
a <- chemForm[1]
b <- chemForm[2]
c <- chemForm[3]
d <- chemForm[4]
e <- chemForm[5]
f <- chemForm[6]
z <- chemForm[7]
# stoichD: stoichiometries for an electron donor
ySource <- -1
yH2o <- -(3*a+4*e-d)
yHco3 <- a
yNh4 <- c
yHpo4 <- e
yHs <- f
yH <- 5*a+b-4*c-2*d+7*e-f
yE <- -z+4*a+b-3*c-2*d+5*e-2*f
stoichD <- c(ySource,yH2o,yHco3,yNh4,yHpo4,yHs,yH,yE)
stoichD[c(9,10)] <- 0 # add additional components: e-acceptor and biomass
# stoichA: stoichiometries for e acceptor
stoichA <- rep(0, 10)
stoichA[9] <- -1  # oxygen
stoichA[7] <- -4  #  h+
stoichA[8] <- -4  #  e-
stoichA[2] <- 2  #  h2o
# stoichCat: stoichiometries for catabolic reaciton
yEd <- stoichD[8]
yEa <- stoichA[8]
stoichCat <- stoichD-(yEd/yEa)*stoichA
#  stoichAnStar: stoichiometries for anabolic reaciton  (N source = NH4+)
chemFormBiom <- c(1, 1.8, 0.2, 0.5, 0, 0, 0)  # C H_1.8 N_0.2 O_0.5
aB <- chemFormBiom[1]
bB <- chemFormBiom[2]
cB <- chemFormBiom[3]
dB <- chemFormBiom[4]
eB <- chemFormBiom[5]
fB <- chemFormBiom[6]
zB <- chemFormBiom[7]
ySource <- -1
yH2o <- -(3*aB+4*eB-dB)
yHco3 <- aB
yNh4 <- cB
yHpo4 <- eB
yHs <- fB
yH <- 5*aB+bB-4*cB-2*dB+7*eB-fB
yE <- -zB+4*aB+bB-3*cB-2*dB+5*eB-2*fB
stoichAnStarB <- c(ySource,yH2o,yHco3,yNh4,yHpo4,yHs,yH,yE)
stoichAnStarB[c(9,10)] <- 0  # add additional components: e-acceptor and biomass
stoichAnStarB <- -stoichAnStarB  ##stoichi for biosynthesis (as opposite to biomass oxidation)
stoichAnStarB[10] <- stoichAnStarB[1] # change the location of biomass in the vector
stoichAnStarB[1] <- 0
# Step 2b) "overall" anabolic reaction
stoichAnStar <- stoichAnStarB+(1/a)*stoichD
yEana <- stoichAnStar[8]  #stoichi coeff for e of anabolism, it could be negative
if (yEana > 0){
stoichAn <- stoichAnStar-yEana/yEa*stoichA #require e acceptor
} else if (yEana < 0){#e required for biosynthesis, c source is more reduced than the biomass
stoichAn <- stoichAnStar-yEana/yEd*stoichD #required e donor
} else{
stoichAn <- stoichAnStar
}
# Energy balance
# Calculate delGd0 for OC using LaRowe and Van Cappellen (2011)
ne <- -z+4*a+b-3*c-2*d+5*e-2*f  # number of electrons transferred in D
nosc <- -ne/a+4  # nominal oxidataion state of carbon
delGcox0 <- 60.3-28.5*nosc  # kJ/C-mol at 25 degC and 1 bar
delGd0 <- delGcox0*a*abs(stoichD[1])  # energy of Rd half reaction kJ/rxn
#_____________________
# free energy of OC
delGf0_D_zero <- 0
# delGf0_zero <- c(delGf0_D_zero, -237.2, -586.8, -79.4, -1096.1, 12.1, 0, 0, 16.4, -67)
delGf0_zero <- c(delGf0_D_zero, -237.2, -586.9, -79.37, -1089.1,12.05, 0, 0, 16.5, -67) #aerobic respiration
delGcox0_zero <- drop(delGf0_zero %*% stoichD) #energy of Rd half reaction withou counting OC
delGf0_D_est <- (delGd0-delGcox0_zero)/stoichD[1] #estimated energy of OC (x*stoiD+delGcox0_zero=delGd0)
# delGf0 (free energy vector of Rd half reaction)
delGf0 <- delGf0_zero
delGf0[1] <- delGf0_D_est
#---------------------------
# standard delG at pH=0, 25 degC and 1 bar
delGcat0 <- drop(delGf0 %*% stoichCat)
delGan0 <- drop(delGf0 %*% stoichAn)
# - stadard delG at pH=7
R <- 0.008314  # kJ/(K.mol)
T <- 298.15  # K
iProton <- 7  # [eD,h2o,hco3-,nh4+,hpo4^2-,hs-,h+,e-,eA,biom]
delGd <- delGd0+R*T*stoichD[iProton]*log(10^(-7)) ##e donor half reaction
delGcox <- delGd / a
delGcat <- delGcat0+R*T*stoichCat[iProton]*log(10^(-7))
delGan <- delGan0+R*T*stoichAn[iProton]*log(10^(-7))
# The Thermodynamic Electron Equivalents Model (TEEM)
# --------
eta <- 0.43
delGsyn <- 200  # kJ/(mol.Biom)
if (is.nan(delGan0) & is.nan(delGan)) {
lambda0 <- NaN
lambda <- NaN
stoichMet <- array(NaN, dim=length(stoichCat))
delGdis0 <- NaN
delGdis <- NaN
} else {
if (delGan < 0){
m <- 1
} else {
m <- -1}
lambda0 <- (delGan0*eta^(-m)+delGsyn)/(-delGcat0*eta)  # assume delGsyn0=delGsyn
lambda <- (delGan*eta^m+delGsyn)/(-delGcat*eta)
if (lambda > 0) {
stoichMet <- lambda*stoichCat+stoichAn
} else {
stoichMet <- stoichAn }
delGdis0 <- drop(delGf0 %*% stoichMet)
delGdis <- delGdis0 + R*T*stoichMet[iProton]*log(10^(-7))
delGdis0 <- -delGdis0
delGdis <- -delGdis
}
c(delGcox,delGd,delGcat,delGan,delGdis,lambda,
stoichCat,stoichAn,stoichMet)
}
# compute in batch
get_lambda <- function(formula_matrix) {
nrows = nrow(formula_matrix)
nrows=nrow(info$chemical_compositions)
lambda_rst <- array(0, dim=c(nrows, 36))
for(i in 1:nrows) {
lambda_rst[i,] <- getThermoStoich(formula_matrix[i,])
}
lambda_rst
}
# compute thermodynamic properties and lambda values
getThermoStoich <- function(chemForm) {
a <- chemForm[1]
b <- chemForm[2]
c <- chemForm[3]
d <- chemForm[4]
e <- chemForm[5]
f <- chemForm[6]
z <- chemForm[7]
# stoichD: stoichiometries for an electron donor
ySource <- -1
yH2o <- -(3*a+4*e-d)
yHco3 <- a
yNh4 <- c
yHpo4 <- e
yHs <- f
yH <- 5*a+b-4*c-2*d+7*e-f
yE <- -z+4*a+b-3*c-2*d+5*e-2*f
stoichD <- c(ySource,yH2o,yHco3,yNh4,yHpo4,yHs,yH,yE)
stoichD[c(9,10)] <- 0 # add additional components: e-acceptor and biomass
# stoichA: stoichiometries for e acceptor
stoichA <- rep(0, 10)
stoichA[9] <- -1  # oxygen
stoichA[7] <- -4  #  h+
stoichA[8] <- -4  #  e-
stoichA[2] <- 2  #  h2o
# stoichCat: stoichiometries for catabolic reaciton
yEd <- stoichD[8]
yEa <- stoichA[8]
stoichCat <- stoichD-(yEd/yEa)*stoichA
#  stoichAnStar: stoichiometries for anabolic reaciton  (N source = NH4+)
chemFormBiom <- c(1, 1.8, 0.2, 0.5, 0, 0, 0)  # C H_1.8 N_0.2 O_0.5
aB <- chemFormBiom[1]
bB <- chemFormBiom[2]
cB <- chemFormBiom[3]
dB <- chemFormBiom[4]
eB <- chemFormBiom[5]
fB <- chemFormBiom[6]
zB <- chemFormBiom[7]
ySource <- -1
yH2o <- -(3*aB+4*eB-dB)
yHco3 <- aB
yNh4 <- cB
yHpo4 <- eB
yHs <- fB
yH <- 5*aB+bB-4*cB-2*dB+7*eB-fB
yE <- -zB+4*aB+bB-3*cB-2*dB+5*eB-2*fB
stoichAnStarB <- c(ySource,yH2o,yHco3,yNh4,yHpo4,yHs,yH,yE)
stoichAnStarB[c(9,10)] <- 0  # add additional components: e-acceptor and biomass
stoichAnStarB <- -stoichAnStarB  ##stoichi for biosynthesis (as opposite to biomass oxidation)
stoichAnStarB[10] <- stoichAnStarB[1] # change the location of biomass in the vector
stoichAnStarB[1] <- 0
# Step 2b) "overall" anabolic reaction
stoichAnStar <- stoichAnStarB+(1/a)*stoichD
yEana <- stoichAnStar[8]  #stoichi coeff for e of anabolism, it could be negative
if (yEana > 0){
stoichAn <- stoichAnStar-yEana/yEa*stoichA #require e acceptor
} else if (yEana < 0){#e required for biosynthesis, c source is more reduced than the biomass
stoichAn <- stoichAnStar-yEana/yEd*stoichD #required e donor
} else{
stoichAn <- stoichAnStar
}
# Energy balance
# Calculate delGd0 for OC using LaRowe and Van Cappellen (2011)
ne <- -z+4*a+b-3*c-2*d+5*e-2*f  # number of electrons transferred in D
nosc <- -ne/a+4  # nominal oxidataion state of carbon
delGcox0 <- 60.3-28.5*nosc  # kJ/C-mol at 25 degC and 1 bar
delGd0 <- delGcox0*a*abs(stoichD[1])  # energy of Rd half reaction kJ/rxn
#_____________________
# free energy of OC
delGf0_D_zero <- 0
# delGf0_zero <- c(delGf0_D_zero, -237.2, -586.8, -79.4, -1096.1, 12.1, 0, 0, 16.4, -67)
delGf0_zero <- c(delGf0_D_zero, -237.2, -586.9, -79.37, -1089.1,12.05, 0, 0, 16.5, -67) #aerobic respiration
delGcox0_zero <- drop(delGf0_zero %*% stoichD) #energy of Rd half reaction withou counting OC
delGf0_D_est <- (delGd0-delGcox0_zero)/stoichD[1] #estimated energy of OC (x*stoiD+delGcox0_zero=delGd0)
# delGf0 (free energy vector of Rd half reaction)
delGf0 <- delGf0_zero
delGf0[1] <- delGf0_D_est
#---------------------------
# standard delG at pH=0, 25 degC and 1 bar
delGcat0 <- drop(delGf0 %*% stoichCat)
delGan0 <- drop(delGf0 %*% stoichAn)
# - stadard delG at pH=7
R <- 0.008314  # kJ/(K.mol)
T <- 298.15  # K
iProton <- 7  # [eD,h2o,hco3-,nh4+,hpo4^2-,hs-,h+,e-,eA,biom]
delGd <- delGd0+R*T*stoichD[iProton]*log(10^(-7)) ##e donor half reaction
delGcox <- delGd / a
delGcat <- delGcat0+R*T*stoichCat[iProton]*log(10^(-7))
delGan <- delGan0+R*T*stoichAn[iProton]*log(10^(-7))
# The Thermodynamic Electron Equivalents Model (TEEM)
# --------
eta <- 0.43
delGsyn <- 200  # kJ/(mol.Biom)
if (is.nan(delGan0) & is.nan(delGan)) {
lambda0 <- NaN
lambda <- NaN
stoichMet <- array(NaN, dim=length(stoichCat))
delGdis0 <- NaN
delGdis <- NaN
} else {
if (delGan < 0){
m <- 1
} else {
m <- -1}
lambda0 <- (delGan0*eta^(-m)+delGsyn)/(-delGcat0*eta)  # assume delGsyn0=delGsyn
lambda <- (delGan*eta^m+delGsyn)/(-delGcat*eta)
if (lambda > 0) {
stoichMet <- lambda*stoichCat+stoichAn
} else {
stoichMet <- stoichAn }
delGdis0 <- drop(delGf0 %*% stoichMet)
delGdis <- delGdis0 + R*T*stoichMet[iProton]*log(10^(-7))
delGdis0 <- -delGdis0
delGdis <- -delGdis
}
c(delGcox,delGd,delGcat,delGan,delGdis,lambda,
stoichCat,stoichAn,stoichMet)
}
# compute in batch
get_lambda <- function(formula_matrix) {
nrows = nrow(formula_matrix)
nrows=nrow(info$chemical_compositions)
lambda_rst <- array(0, dim=c(nrows, 36))
for(i in 1:nrows) {
lambda_rst[i,] <- getThermoStoich(formula_matrix[i,])
}
lambda_rst
}
outfile <- "all_sites_oxy.csv"
fticr_data <- read_csv("S19S_mol_form_data_with_metadata.csv")
View(fticr_data)
info <- get_compositions(fticr_data)
View(info)
out <- get_lambda(info$chemical_compositions)
names <- rep("", 36)
stoich_colnames <- c("donor","h2o","hco3","nh4","hpo4","hs","h","e","acceptor","biom")
stoich_types <- c("stoichCat","stoichAn","stoichMet")
for (i in 1:length(stoich_types)) {
names[((i-1)*10+7):(i*10+6)] <- array(sapply(stoich_types[i], paste, stoich_colnames, sep="_"))
}
df <- as.data.frame(out)
colnames(df) <- names
df['C_num'] <- info$chemical_compositions[,1]
df['CUE'] <- 1/(-df$stoichMet_donor*df$C_num)
df['proxy_rate']<-exp(-abs(df$stoichMet_donor))
df<-cbind(df,fticr_data[,(5:6)])
View(df)
# user parameters ------------------------------------------------------
outfile <- "all_sites_oxy.csv"
fticr_data <- read_csv("S19S_mol_form_data_with_metadata.csv")
# main run -------------------------------------------------------------
info <- get_compositions(fticr_data)
out <- get_lambda(info$chemical_compositions)
# build data frame
df <- as.data.frame(out)
# build col names
names <- rep("", 36)
names[1:6] <- c("delGcox","delGd","delGcat","delGan","delGdis","lambda")
stoich_colnames <- c("donor","h2o","hco3","nh4","hpo4","hs","h","e","acceptor","biom")
stoich_types <- c("stoichCat","stoichAn","stoichMet")
for (i in 1:length(stoich_types)) {
names[((i-1)*10+7):(i*10+6)] <- array(sapply(stoich_types[i], paste, stoich_colnames, sep="_"))
}
colnames(df) <- names
df['C_num'] <- info$chemical_compositions[,1]
df['CUE'] <- 1/(-df$stoichMet_donor*df$C_num)
df['proxy_rate']<-exp(-abs(df$stoichMet_donor))
df<-cbind(df,fticr_data[,(5:6)])
write.csv(df, file = outfile, row.names=FALSE)
View(df)
library(ggplot2)
# Basic violin plot
p <- ggplot(df, aes(x=ID, y=delGd)) +
geom_violin()
p
library(ggplot2)
# Basic violin plot
p <- ggplot(df, aes(x=factor(ID), y=delGd)) +
geom_violin()
p
library(ggplot2)
# Basic violin plot
p <- ggplot(df, aes(x=ID, y=delGd)) +
geom_point()
p
library(ggplot2)
# Basic violin plot
p <- ggplot(df, aes(x=Position, y=delGd)) +
geom_violin()
p
df <- read_csv("all_sites_oxy.csv")
metadata <- read_csv("whondrs_metadata.csv")
View(df)
View(metadata)
metadata  <- metadata  %>% select(Sample_ID, State_or_Province, Stream_Order, MS_Latitude_dec.deg, MS_Longitude_dec.deg, SW_pH, SW_Temp_degC)
View(metadata)
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
df <- read_csv("all_sites_oxy.csv")
metadata <- read_csv("whondrs_metadata.csv")
metadata  <- metadata  %>% select(Sample_ID, State_or_Province, Stream_Order, MS_Latitude_dec.deg, MS_Longitude_dec.deg, SW_pH, SW_Temp_degC)
mt  <- metadata  %>% select(Sample_ID, State_or_Province, Stream_Order, SW_pH, SW_Temp_degC)
M = cor(mt)
View(metadata)
df <- read_csv("all_sites_oxy.csv")
metadata <- read_csv("whondrs_metadata.csv")
metadata  <- metadata  %>% select(Sample_ID, State_or_Province, Stream_Order, MS_Latitude_dec.deg, MS_Longitude_dec.deg, SW_pH, SW_Temp_degC)
df <- metadata %>% mutate(ID = strsplit(Sample_ID, "_")[[1]][2])
View(df)
df <- read_csv("all_sites_oxy.csv")
metadata <- read_csv("whondrs_metadata.csv")
metadata  <- metadata  %>% select(Sample_ID, State_or_Province, Stream_Order, MS_Latitude_dec.deg, MS_Longitude_dec.deg, SW_pH, SW_Temp_degC)
metadata <- metadata %>% mutate(ID = strsplit(Sample_ID, "_")[[1]][2])
View(metadata)
metadata$ID <- as.numeric(metadata$ID)
na_strings <- c("Not_Provided" )
metadata %>%
replace_with_na_all(condition = ~.x %in% na_strings)
library(tidyr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(naniar)
metadata %>%
replace_with_na_all(condition = ~.x %in% na_strings)
metadata <- metadata %>%
replace_with_na_all(condition = ~.x %in% na_strings)
View(metadata)
library(SOfun)
makemeNA(metadata, "[^0-9]", FALSE)
install.packages("SOfun")
library(SOfun)
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdat[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdat <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdat$MS_Latitude_dec.deg <- round(metdat$MS_Latitude_dec.deg)
metdat$MS_Longitude_dec.deg <- round(metdat$MS_Longitude_dec.deg)
mt  <- metdat  %>% select(Sample_ID, Stream_Order, SW_pH, SW_Temp_degC, MS_Latitude_dec.deg,metdat$MS_Longitude_dec.deg )
metdat <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdat$MS_Latitude_dec.deg <- round(metdat$MS_Latitude_dec.deg)
metdat$MS_Longitude_dec.deg <- round(metdat$MS_Longitude_dec.deg)
mt  <- metdat  %>% select(Sample_ID, Stream_Order, SW_pH, SW_Temp_degC, MS_Latitude_dec.deg,MS_Longitude_dec.deg )
View(metdat)
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdata$MS_Latitude_dec.deg <- round(metdat$MS_Latitude_dec.deg)
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metdata$MS_Latitude_dec.deg <- round(metadata$MS_Latitude_dec.deg)
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metadata$MS_Latitude_dec.deg <- round(metadata$MS_Latitude_dec.deg)
metadata$MS_Longitude_dec.deg <- round(metadata$MS_Longitude_dec.deg)
mt  <- metdata  %>% select(Sample_ID, Stream_Order, SW_pH, SW_Temp_degC, MS_Latitude_dec.deg,MS_Longitude_dec.deg )
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metadata$MS_Latitude_dec.deg <- round(metadata$MS_Latitude_dec.deg)
metadata$MS_Longitude_dec.deg <- round(metadata$MS_Longitude_dec.deg)
mt  <- metadata  %>% select(Sample_ID, Stream_Order, SW_pH, SW_Temp_degC, MS_Latitude_dec.deg,MS_Longitude_dec.deg )
M = cor(mt)
corrplot(M, order = 'AOE')
View(mt)
metadata[] <- lapply(metadata, function(x) as.numeric(as.character(x)))
metadata$MS_Latitude_dec.deg <- round(metadata$MS_Latitude_dec.deg)
metadata$MS_Longitude_dec.deg <- round(metadata$MS_Longitude_dec.deg)
mt  <- metadata  %>% select(Sample_ID, Stream_Order, SW_pH, SW_Temp_degC, MS_Latitude_dec.deg,MS_Longitude_dec.deg )
M = cor(na.omit(mt))
corrplot(M, order = 'AOE')
na.omit(mt)
dfna <_ na.omit(mt)
dfna <- na.omit(mt)
as.data.frame(na.omit(mt))
